{"version":3,"sources":["components/ToolBar.module.css","PixiApp.ts","components/ToolBar.tsx","components/PixiContainer.tsx","components/MainPanel.tsx","components/CheckBox.tsx","components/SidePanel.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["module","exports","app","PIXI","antialias","resolution","stage","interactive","engine","Engine","create","world","runner","Runner","start","creatorOptions","static","on","event","spawnPoint","data","getLocalPosition","x","y","width","height","isStatic","body","Bodies","rectangle","graphics","beginFill","lineStyle","drawRect","endFill","position","set","addChild","Events","rotation","angle","World","addBody","spawnBox","PlayButton","useState","paused","setPaused","togglePaused","useCallback","enabled","onClick","path","mdiPause","mdiPlay","color","size","ToolBar","className","styles","container","PixiContainer","ref","useRef","useEffect","current","childNodes","length","resizeTo","hitArea","screen","appendChild","view","removeChild","style","flex","MainPanel","CheckBox","children","id","onToggle","type","onChange","undefined","htmlFor","toggleStatic","SidePanel","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.30780c57.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"ToolBar_container__1h9lV\"};","import { Bodies, Engine, Events, Runner, World } from 'matter-js';\nimport * as PIXI from 'pixi.js';\n\nexport const app = new PIXI.Application({\n    antialias: true,\n    resolution: 1\n});\nexport const stage = app.stage;\nstage.interactive = true;\n\nexport const engine = Engine.create();\nexport const world = engine.world;\nexport const runner = Runner.create();\nRunner.start(runner, engine);\n\n/**\n * Spawns a rectangular box at a specific location.\n * @param x The X coords of the box's center.\n * @param y The Y coords of the box's center.\n * @param width The width of the box.\n * @param height The height of the box.\n * @param isStatic Whether the box will be static or not.\n */\nexport function spawnBox(x: number, y: number, width: number, height: number, isStatic: boolean = false): Matter.Body {\n    const body = Bodies.rectangle(x, y, width, height, { isStatic });\n\n    const graphics = new PIXI.Graphics();\n\n    graphics.beginFill(0, 0);\n    graphics.lineStyle(3, 0xFFFFFF);\n    graphics.drawRect(- width / 2, - height / 2, width, height);\n    graphics.endFill();\n\n    graphics.position.set(x, y);\n\n    stage.addChild(graphics);\n\n    if (!isStatic) {\n        Events.on(engine, \"afterUpdate\", () => {\n            graphics.position.set(body.position.x, body.position.y);\n            graphics.rotation = body.angle;\n        });\n    }\n\n    World.addBody(world, body);\n\n    return body;\n}\n\nexport const creatorOptions = {\n    static: false\n}\n\nstage.on('pointerdown', (event: PIXI.InteractionEvent) => {\n    const spawnPoint = event.data.getLocalPosition(stage);\n    spawnBox(spawnPoint.x, spawnPoint.y, 50, 50, creatorOptions.static);\n});","import styles from './ToolBar.module.css';\nimport Icon from '@mdi/react';\nimport { mdiPlay, mdiPause } from '@mdi/js';\nimport { useCallback, useState } from 'react';\nimport { runner } from '../PixiApp';\n\nexport function PlayButton() {\n    const [paused, setPaused] = useState(false);\n    const togglePaused = useCallback(() => setPaused(!paused), [paused]);\n\n    runner.enabled = !paused;\n\n    return (<button onClick={togglePaused}>\n        <Icon path={paused ? mdiPause : mdiPlay} color={paused ? '#fcbf18' : '#2bf12b'} size='25px' />\n    </button>);\n}\n\nexport default function ToolBar() {\n    return (<div className={styles.container}>\n        <PlayButton />\n    </div>);\n}","import { app } from '../PixiApp';\nimport { useEffect, useRef } from 'react';\n\nexport default function PixiContainer() {\n\n    const ref = useRef<HTMLDivElement>(null);\n\n    useEffect(() => {\n        const container = ref.current;\n        if (container === null || container.childNodes.length !== 0) return;\n\n        app.resizeTo = container;\n        app.stage.hitArea = app.screen;\n        container.appendChild(app.view);\n\n        return () => { container.removeChild(app.view) };\n    }, [ref]);\n\n    return <div ref={ref} style={{ width: '100%', flex: 1 }} />;\n}","import ToolBar from './ToolBar';\nimport PixiContainer from './PixiContainer';\n\nexport default function MainPanel() {\n    return (<div className=\"main-panel\">\n        <ToolBar />\n        <PixiContainer />\n    </div>);\n}","type CheckBoxProps = {\n    /**\n     * The HTML id for the checkbox.\n     */\n    id: string,\n\n    /**\n     * A method to call when the checkbox is toggled.\n     */\n    onToggle?: () => void,\n\n    /**\n     * Anything to display as the checkbox's label.\n     */\n    children?: React.ReactNode\n}\n\nexport default function CheckBox({ children, id, onToggle }: CheckBoxProps) {\n    return (<div className=\"form-check\">\n        <input className=\"form-check-input\" type=\"checkbox\" id={id} onChange={onToggle} />\n        {children !== undefined && <label className=\"form-check-label\" htmlFor={id}>\n            {children}\n        </label>}\n    </div>);\n}","import { creatorOptions } from '../PixiApp';\nimport CheckBox from './CheckBox';\n\nfunction toggleStatic() {\n    creatorOptions.static = !creatorOptions.static;\n}\n\nexport default function SidePanel() {\n    return (<div className=\"side-panel\">\n        <CheckBox id=\"spawnStatic\" onToggle={toggleStatic}>Make object static</CheckBox>\n    </div>);\n}","import './App.css';\n\nimport MainPanel from './components/MainPanel';\nimport SidePanel from './components/SidePanel';\n\nfunction App() {\n\treturn (<>\n\t\t<MainPanel />\n\t\t<SidePanel />\n\t</>);\n}\n\nexport default App;","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'normalize.css';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<App />\n\t</React.StrictMode>,\n\tdocument.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}